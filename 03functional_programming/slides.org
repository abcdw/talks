#+TITLE: What is functional programming?
#+AUTHOR: Andrew Tropin
#+EMAIL: andrew@trop.in

#+REVEAL_THEME: white
#+EXPORT_FILE_NAME: ../docs/03functional_programming
#+REVEAL_INIT_OPTIONS: hash:true, slideNumber:true, controls:false
#+REVEAL_EXTRA_CSS: css/custom.css
#+REVEAL_TITLE_SLIDE: <h2 class="title">Functional programming:</h2> <h3 class="subtitle">What is it?</h3>
#+REVEAL_TITLE_SLIDE: <img class="title-image" height="200px" src="images/03/lambda.png"><p class="author">%a<p><p class="date">2020-04-11</p>

#+OPTIONS: num:nil
#+OPTIONS: toc:nil

* The Value of Values
[[https://youtu.be/-6BsiVyC1kM][talk]]

** Value
- Immutable
- Semantically transparent

** Places, variables and state
- memory
- file system
- database
- network service
- address book

Variable is a ref to a place where the value stored.

State is a union of all related places.
#+BEGIN_NOTES
Stickers on the wall
#+END_NOTES

** Email example
#+ATTR_REVEAL: :frag (appear)
- 10 minute ago: andrewtropin@gmail.com
- 02 minute ago: andrey@trop.in
- 01 minute ago: andrew@trop.in

** Value examples
Simple
#+BEGIN_SRC json
2
"hello"
#+END_SRC

Complex
#+BEGIN_SRC json
[3, 4]
#+END_SRC

Aggregated
#+BEGIN_SRC json
{"a": ["b", 7]}
#+END_SRC

* Information system
- Interacts with places
- Uses values
- Produces values
- Saves to places
- Supports Decision making

* Imperative programming
** Imperative factorial
#+BEGIN_SRC c
int n = 23;
int f = 1;
int i = 1;

iter:
f = f * i;
i++;
if (i <= n)
  goto iter;

print f;
#+END_SRC

** More structure
#+BEGIN_SRC c
int n = 23;
int f = 1;
int i = 1;

iter:
if (i <= n) {
  f = f * i;
  i++;
  goto iter;
}

print f;
#+END_SRC

** Move flow control
#+BEGIN_SRC c
int n = 23;
int f = 1;
int i;

for (i = 1; i <= n;) {
  f = f * i;
  i++;
}

print f;
#+END_SRC

** Procedural
#+BEGIN_SRC c
int f;

int factorial(int n) {
  int i;
  for (i = 1; i <= n; i++) {
    f = f * i;
  }
}

int main() {
  f = 1;
  factorial(23);
  printf("%d", f)
}
#+END_SRC

** Sum up
- Statements changes the state
- Statements depends on the state
- Procedure is a collection of statements
#+BEGIN_NOTES
Persists values somewhere.
#+END_NOTES

* Functional programming
** Expressions
Something that can be evaluated and produce the value.
#+BEGIN_SRC c
2 + 2
#+END_SRC

** Expressions 2
#+BEGIN_SRC c
2 + 2 * 3
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC clojure
(+  2 (* 2 3))
#+END_SRC

** Expressions evaluation
#+BEGIN_SRC clojure
(+ 2 (* 2 3))
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC clojure
(+ 2 6)
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC clojure
8
#+END_SRC

** Factorial expressions
#+BEGIN_SRC clojure
(defn factorial [n]
  (if (= 1 n)
    1
    (* n (factorial (- n 1)))))

(factorial 10)
;; => 3628800
#+END_SRC

** Magic do expression
#+BEGIN_SRC clojure
(do
 (+ 2 2)
 (* 3 5))
;; => 15
#+END_SRC

** Functions
#+attr_html: :height 200px
https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Function_color_example_3.svg/1024px-Function_color_example_3.svg.png
- In mathematical sense
- In CS sense

#+BEGIN_NOTES
- Relationship between two sets, associates every element of first set
  with exactly one element of the second.
- Computation that calculates the value based on input, evaluating expressions.
#+END_NOTES

** Function example 1
#+BEGIN_SRC clojure
(defn figure->color [figure]
  (if (or (= "triangle" figure)
          (= "square" figure))
    "red"
    (if (= "rectangle" figure)
      "yellow"
      (if (= "polygon" figure)
        "green"))))

(figure->color "rectangle")
;; => "yellow"
#+END_SRC

** Function example 2
#+BEGIN_SRC clojure
(def figure->color
  {"triangle"  "red"
   "rectangle" "yellow"
   "polygon"   "green"
   "square"    "red"})

(figure->color "polygon")
;; => "green"
#+END_SRC

** Procedures vs Functions
#+attr_html: :height 500px
[[./images/03/diag.png]]

* There is no VS
** Function + Procedures
Both can be useful

* Contacts
- andrew@trop.in
- tg: @andrewtropin

* noexport                                                         :noexport:
** Benefits and tradeoffs
*** Green vs Red paper
*** Laziness and memoization

** FAQ
- How to deal with values?
Persistent data structures
